
float orient2d(const float2 a, const float2 b, const float2 c){
    return (b.x-a.x)*(c.y-a.y) - (b.y-a.y)*(c.x-a.x);
}

float area(const float2 a, const float2 b, const float2 c){
    return 0.5f*((a.x*b.y)+(a.y*c.x)+(b.x*c.y)-(c.x*b.y)-(c.y*a.x)-(b.x*a.y));
}

int isTopLeft(const float2 a, const float2 b){
	return sign(length(b-a));
}

__kernel void render(
__constant __read_only float* x1A, 
__constant __read_only float* rA, 
__constant __read_only float* normal,
__constant __read_only float* vertCount,
__constant __read_only float* camMatrix,
__constant __read_only float* lp,
__constant __read_only int* tex,
__write_only image2d_t result,
__global float* zBuffer){

	int index = 15*get_global_id(0);
	
	float ratiox = 1280*0.5f;
	float ratioy = 720*0.5f;
	float res = vertCount[1];
	float2 ratio = (float2)(1280/res, 720/res);
	
	float3 lightPos = (float3)(lp[0],lp[1],lp[2]);
	float3 cameraPos = (float3)(-camMatrix[0],-camMatrix[1],-camMatrix[2]);
	
	float2 v0 = ceil((float2)((x1A[index+0]*(ratiox/x1A[index+6]))+ratiox,(x1A[index+1]*(ratioy/x1A[index+6]))+ratioy));
	float2 v1 = ceil((float2)((x1A[index+2]*(ratiox/x1A[index+7]))+ratiox,(x1A[index+3]*(ratioy/x1A[index+7]))+ratioy));
	float2 v2 = ceil((float2)((x1A[index+4]*(ratiox/x1A[index+8]))+ratiox,(x1A[index+5]*(ratioy/x1A[index+8]))+ratioy));
			
	float2 x0 = v0/res;
	float2 x1 = v1/res;
	float2 x2 = v2/res;
	
	int2 sx = clamp((int2)(fmin(x0.x,fmin(x1.x,x2.x)),fmax(x0.x,fmax(x1.x,x2.x))),0,(1280/res));
	int2 sy = clamp((int2)(fmin(x0.y,fmin(x1.y,x2.y)),fmax(x0.y,fmax(x1.y,x2.y))),0,(720/res));
	
	float bias0 = isTopLeft(x1,x2) ? 0 : -1;
	float bias1 = isTopLeft(x2,x0) ? 0 : -1;
	float bias2 = isTopLeft(x0,x1) ? 0 : -1;
	
	float C
	
	if(!(x0.x<0 && x1.x<0 && x2.x<0 && x0.y<0 && x1.y<0 && x2.y<0)&&!(x0.x>ratio.x && x1.x>ratio.x && x2.x>ratio.x && x0.y>ratio.y && x1.y>ratio.y && x2.y>ratio.y)){
	for(float j=sy.x;j<sy.y;j+=1/res){
		for(float i=sx.x;i<sx.y;i+=1/res){	
			int zBufferIndex = (int)(floor(i)+floor(j)*(1280/res));
			float2 p = (float2)(i,j);
			

			float w0 = orient2d(x1,x2,p)+bias0;
			float w1 = orient2d(x2,x0,p)+bias1;
			float w2 = orient2d(x0,x1,p)+bias2;
			if(w0<=0.0f && w1<=0.0f && w2<=0.0f){
				float a = area(x0,x1,x2);
				float a0 = area(p,x1,x2)/a;
				float a1 = area(x0,p,x2)/a;
				float a2 = area(x0,x1,p)/a;
				float z = ((x1A[index+6]*a0)+(x1A[index+7]*a1)+(x1A[index+8]*a2));
				
				if(zBuffer[zBufferIndex]==0){zBuffer[zBufferIndex]=-40.0f;}
				if(zBuffer[zBufferIndex]<=z){
					zBuffer[zBufferIndex]=z;
					float3 n = ((float3)(normal[index  ],normal[index+1],normal[index+2])*a0)
							  +((float3)(normal[index+3],normal[index+4],normal[index+5])*a1)
							  +((float3)(normal[index+6],normal[index+7],normal[index+8])*a2);
					float3 tri = ((float3)(rA[index  ],rA[index+1],rA[index+2])*a0)
								+((float3)(rA[index+3],rA[index+4],rA[index+5])*a1)
								+((float3)(rA[index+6],rA[index+7],rA[index+8])*a2);
					
					//float viewDistance = fast_length(cameraPos-tri);
					//float fogF = fmin(exp(-0.1*viewDistance),1);
					
					float3 toCam = normalize(cameraPos-tri);
					float3 toLight = normalize(lightPos-tri);
					
					float lightDistance = fmax(fast_length(lightPos-tri),0);
					float attenuation = 1.0f/((lightDistance*lightDistance*0.1f)+(0.01f*lightDistance)+1.0f);
					float light = attenuation*dot(toLight,n);
					
					float3 reflect = -toLight-(2*dot(-toLight,n)*n);
					float specF = fmin(fmax(dot(toCam,reflect),0),1);
					float spec = attenuation*0.5f*pow(specF,10);
					write_imagef(result,(int2)(i,j),(float4)(spec,light+spec,spec,0));
				}
			}
		}
	}
	}
}
